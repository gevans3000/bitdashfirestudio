#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# Bootstraps a local + Codex/CI dev environment for gevans3000/bitdashfirestudio
# ---------------------------------------------------------------------------
# â€¢ Syncs package-lock, installs Node via nvm (or NodeSource fallback).
# â€¢ Installs npm deps (ci-first), dev-tooling, and optional Python deps.
# â€¢ Rebuilds native bindings for current arch.
# â€¢ Idempotent: safe to run multiple times; exits non-zero on failure.
# ---------------------------------------------------------------------------

# â”€â”€ Self-healing exec permission â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
if [[ ! -x "$0" && -f "$0" ]]; then
  echo "â–¶ Fixing script permissionsâ€¦"
  chmod +x "$0"
  echo "â–¶ Permissions fixed."
fi

set -euo pipefail
echo "â–¶ Bootstrapping dev environmentâ€¦"

# â”€â”€ Node setup â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
NODE_VERSION="${NODE_VERSION:-$(cat .nvmrc 2>/dev/null || echo 18)}"

if command -v nvm >/dev/null 2>&1; then
  echo "â–¶ Using nvm to install/use Node ${NODE_VERSION}"
  nvm install "$NODE_VERSION"
  nvm use     "$NODE_VERSION"
else
  echo "â–¶ nvm not found â†’ installing Node via NodeSource (${NODE_VERSION})"
  curl -fsSL "https://deb.nodesource.com/setup_${NODE_VERSION%%.*}.x" | sudo -E bash -
  sudo apt-get install -y nodejs
fi

node -v
npm -v

# â”€â”€ Sync lockfile & install deps â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "â–¶ Ensuring package-lock.json matches package.jsonâ€¦"
npm install --package-lock-only

echo "â–¶ Installing npm dependencies (ci preferred)â€¦"
if ! npm ci; then
  echo "â–¶ npm ci failed â†’ falling back to npm install"
  npm install
fi

echo "â–¶ Rebuilding native modules for this architectureâ€¦"
npm rebuild

# â”€â”€ Dev-tooling (ESLint, Jest, TS) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
echo "â–¶ Installing/ensuring dev dependenciesâ€¦"
npm install --save-dev \
  eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin \
  jest ts-jest @types/jest \
  ts-node typescript @types/node

# â”€â”€ Optional Python deps â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
if [[ -f requirements.txt ]]; then
  echo "â–¶ Installing Python requirementsâ€¦"
  python -m pip install --quiet -r requirements.txt
fi

echo "ðŸŸ¢ setup_dev.sh complete. Available commands:"
echo "   npm run lint   # ESLint"
echo "   npm run test   # Jest"
echo "   npm run backtest"
echo "   npm run commitlog"
