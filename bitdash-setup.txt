Below is a **drop-in “Codex boot-strap” folder** you can copy straight into
`gevans3000/bitdashfirestudio/` .
It gives Codex everything it needs to:

* install all dev-deps in its sandbox (no “jest not found / ts-node missing”);
* print a 333 + 333-token context block (`codex_context.sh`);
* run **lint → test → backtest** in CI and in Codex’s terminal.

> **File tree**

```
scripts/
├─ setup_dev.sh        # one-shot installer Codex can call
├─ codex_context.sh    # prints memory-preamble for the chat prompt
└─ backtest.ts         # placeholder (ts-node)
.github/
└─ workflows/
   └─ ci.yml           # runs in Actions *and* proves the scripts work
.eslintrc.json
jest.config.js
tsconfig.json
```

---

## 1 `scripts/setup_dev.sh`

```bash
#!/usr/bin/env bash
# Run once: installs all dev-tools locally so Codex finds them.

set -e
echo "▶ Installing dev-dependencies…"
npm install --save-dev \
  eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin \
  jest ts-jest @types/jest \
  ts-node typescript @types/node

echo "▶ Done.  You can now run:"
echo "   npm run lint   # ESLint"
echo "   npm run test   # Jest"
echo "   npm run backtest"
```

---

## 2 `scripts/codex_context.sh`

```bash
#!/usr/bin/env bash
# Prints 333-token commit memory + 333-token task block.

COMMITS=$(git log -n5 --pretty=format:'• %s – %b' | head -c 2000)     # ≈333 tokens
TASKS=$(grep '^- \[ \]' TASKS.md | head -n15 | sed 's/^- \[ \] //' | head -c 2000)  # ≈333

cat <<EOF
[MEMORY PREAMBLE—DO NOT EDIT BELOW]
Recent commits (333 tokens):
$COMMITS

Pending tasks (333 tokens):
$TASKS
[END MEMORY PREAMBLE]
EOF
```

> **How Codex uses it**
>
> 1. Run `./scripts/codex_context.sh` in the built-in terminal.
> 2. Copy the output into the first chat message.
> 3. Codex now “remembers” the last 333 commit-tokens and the next 333 task-tokens.

---

## 3 Placeholder TypeScript scripts

`scripts/backtest.ts`

```ts
// Backtest placeholder – replace with real logic later
console.log('Backtest script placeholder ✅');
```


---

## 4 Config files

### `.eslintrc.json`

```jsonc
{
  "parser": "@typescript-eslint/parser",
  "parserOptions": { "project": "./tsconfig.json", "sourceType": "module" },
  "plugins": ["@typescript-eslint"],
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  "root": true,
  "env": { "node": true, "es2021": true }
}
```

### `jest.config.js`

```js
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/?(*.)+(spec|test).ts?(x)']
};
```

### `tsconfig.json`

```jsonc
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "dist"
  },
  "include": ["src/**/*", "scripts/**/*"]
}
```

---

## 5 `package.json` scripts snippet

Add (or merge) the following:

```jsonc
{
  "scripts": {
    "setup":     "bash ./scripts/setup_dev.sh",
    "lint":      "eslint \"src/**/*.{ts,tsx,js,jsx}\"",
    "test":      "jest",
    "backtest":  "ts-node scripts/backtest.ts",
    "codex":     "bash ./scripts/codex_context.sh"
  }
}
```

Run once:

```bash
npm run setup
```

---

## 6 GitHub Actions workflow (optional but recommended)

`.github/workflows/ci.yml`

```yaml
name: BitDash CI
on:
  push: { branches: [ master, main ] }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run test
      - run: npm run backtest
```

---

### How to use in Codex Teams

1. **Paste this answer into Codex** (or commit the files directly).

2. In Codex terminal:

   ```bash
   npm run setup       # installs dev-tools
   npm run codex       # prints the 333/333 memory block
   ```

3. Copy that block into the chat as the first message → Codex now has its memory.

4. Run your usual commands; they no longer “skip.”

The repo now fully boot-straps Codex’s sandbox—no ESLint/Jest/ts-node errors, plus an easy script for persistent memory context.
